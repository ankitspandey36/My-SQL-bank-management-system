-- Create the database
CREATE DATABASE IF NOT EXISTS nationalbank 
CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;
USE nationalbank;

-- 1. Branches Table
CREATE TABLE Branches (
    BranchID INT PRIMARY KEY AUTO_INCREMENT,
    BranchName VARCHAR(50),
    Location VARCHAR(100),
    Phone VARCHAR(15)
);

-- 2. Employees Table
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Position VARCHAR(50),
    Salary DECIMAL(15, 2),
    HireDate DATE,
    BranchID INT,
    Email VARCHAR(100) UNIQUE NOT NULL,
    FOREIGN KEY (BranchID) REFERENCES Branches(BranchID)
);

-- 3. Admin Table
CREATE TABLE Admin (
    AdminID INT PRIMARY KEY AUTO_INCREMENT,
    Username VARCHAR(50) UNIQUE NOT NULL,     
    Password VARCHAR(255) NOT NULL,             
    EmployeeID INT,
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
);

-- 4. Customers Table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY AUTO_INCREMENT,
    Password VARCHAR(100),
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Address VARCHAR(100),
    Email VARCHAR(100),
    Phone VARCHAR(15),
    BranchID INT,
    FOREIGN KEY (BranchID) REFERENCES Branches(BranchID)
);

-- 5. Accounts Table
CREATE TABLE Accounts (
    AccountID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT,
    AccountType VARCHAR(20),
    Balance DECIMAL(15, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) ON DELETE CASCADE
);

-- 6. Transactions Table
CREATE TABLE Transactions (
    TransactionID INT AUTO_INCREMENT PRIMARY KEY, 
    AccountID INT NOT NULL,                      
    TransactionType VARCHAR(20) NOT NULL,       
    Amount DECIMAL(15, 2) NOT NULL,             
    TransactionDate DATETIME NOT NULL, 
    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID) ON DELETE CASCADE
);

-- 7. Loans Table
CREATE TABLE Loans (
    LoanID INT AUTO_INCREMENT PRIMARY KEY,
    CustomerID INT,
    LoanType VARCHAR(20),
    Amount DECIMAL(15, 2),
    InterestRate DECIMAL(5, 2),
    LoanDate DATE,
    DueDate DATE,
    Status VARCHAR(20),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- 8. Payments Table
CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY AUTO_INCREMENT,
    LoanID INT,
    Amount DECIMAL(15, 2),
    PaymentDate DATE,
    PaymentMethod VARCHAR(20),
    FOREIGN KEY (LoanID) REFERENCES Loans(LoanID) ON DELETE CASCADE
);

-- 9. Account_Cards Table
CREATE TABLE Account_Cards (
    CardID INT AUTO_INCREMENT PRIMARY KEY,
    AccountID INT NOT NULL,
    CardType VARCHAR(20) NOT NULL,
    CardNumber CHAR(16) UNIQUE NOT NULL,
    ExpiryDate DATE NOT NULL,
    CVV INT NOT NULL,
    PIN CHAR(4) NOT NULL,
    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID) ON DELETE CASCADE
);

-- 10. Customer_Queries Table
CREATE TABLE Customer_Queries (
    QueryID INT AUTO_INCREMENT PRIMARY KEY,
    CustomerID INT,
    EmployeeID INT,
    QueryDate DATE,
    QueryType VARCHAR(50),
    Description TEXT,
    Status VARCHAR(20),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
);

-- 11. EmployeeAudit Table
CREATE TABLE EmployeeAudit (
    AuditID INT AUTO_INCREMENT PRIMARY KEY,
    EmployeeID INT NOT NULL,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Position VARCHAR(50),
    Salary DECIMAL(15, 2),
    BranchID INT,
    Action VARCHAR(20) NOT NULL,
    ChangedBy VARCHAR(50) NOT NULL,
    ChangedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 12. TransactionAudit Table
CREATE TABLE TransactionAudit (
    AuditID INT AUTO_INCREMENT PRIMARY KEY,
    TransactionID INT NOT NULL,
    AccountID INT NOT NULL,
    TransactionType VARCHAR(20) NOT NULL,
    Amount DECIMAL(10, 2) NOT NULL,
    TransactionDate DATETIME NOT NULL,
    Action VARCHAR(20) NOT NULL,
    ChangedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- TRIGGERS

DELIMITER $$

-- Transaction Insert Trigger
CREATE TRIGGER after_transaction_insert 
AFTER INSERT ON Transactions 
FOR EACH ROW 
BEGIN 
    INSERT INTO TransactionAudit (TransactionID, AccountID, TransactionType, Amount, TransactionDate, Action) 
    VALUES (NEW.TransactionID, NEW.AccountID, NEW.TransactionType, NEW.Amount, NEW.TransactionDate, 'INSERT'); 
END $$

-- Employee Insert Trigger
CREATE TRIGGER after_employee_insert 
AFTER INSERT ON Employees 
FOR EACH ROW 
BEGIN 
    INSERT INTO EmployeeAudit (EmployeeID, FirstName, LastName, Position, Salary, BranchID, Action, ChangedBy) 
    VALUES (NEW.EmployeeID, NEW.FirstName, NEW.LastName, NEW.Position, NEW.Salary, NEW.BranchID, 'CREATE', 'SYSTEM'); 
END $$

-- Employee Update Trigger
CREATE TRIGGER after_employee_update 
AFTER UPDATE ON Employees 
FOR EACH ROW 
BEGIN 
    INSERT INTO EmployeeAudit (EmployeeID, FirstName, LastName, Position, Salary, BranchID, Action, ChangedBy) 
    VALUES (NEW.EmployeeID, NEW.FirstName, NEW.LastName, NEW.Position, NEW.Salary, NEW.BranchID, 'UPDATE', 'SYSTEM'); 
END $$

-- Employee Delete Trigger
CREATE TRIGGER after_employee_delete 
AFTER DELETE ON Employees 
FOR EACH ROW 
BEGIN 
    INSERT INTO EmployeeAudit (EmployeeID, FirstName, LastName, Position, Salary, BranchID, Action, ChangedBy) 
    VALUES (OLD.EmployeeID, OLD.FirstName, OLD.LastName, OLD.Position, OLD.Salary, OLD.BranchID, 'DELETE', 'SYSTEM'); 
END $$

DELIMITER ;
